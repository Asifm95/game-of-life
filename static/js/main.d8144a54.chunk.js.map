{"version":3,"sources":["utils/config.ts","utils/utils.ts","hooks/useWindowResize.tsx","components/Controls.tsx","components/Board.tsx","conway.ts","hooks/useBoardGenerator.tsx","App.tsx","index.tsx"],"names":["config","row","column","randomize","padding","verticalPadding","hoirizontalPadding","size","aliveColor","deadColor","border","speed","gameDescription","startBtnColor","stopBtnColor","resetBtnColor","showSettingsColor","hideSettingsColor","emptyGridGenerator","col","Array","from","map","fill","getCurrentGridDim","grid","length","getWindowWidth","window","innerWidth","document","documentElement","clientWidth","body","getWindowHeight","innerHeight","clientHeight","setContainerHeight","vh","style","setProperty","randomizer","Math","floor","random","digitsOnly","useWindowResize","useState","windowWidth","setWindowWidth","windowHeight","setWindowHeight","useEffect","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener","controls","Controls","isRunning","toggleSimulation","clearBoard","tick","setTick","showSettings","setShowSettings","className","onClick","background","type","width","value","onChange","cells","Board","gameBoardRef","gridDimension","toggleCellState","ref","gridTemplateColumns","i","j","key","height","backgroundColor","getCellState","neighborCount","getNeighboringCellsCount","forEach","x","y","currI","currJ","useBoardGenerator","gameBoard","dimension","setDimension","setGrid","current","boardDim","calculateGridDimension","board","newGrid","randomizedGridGenerator","App","useRef","tickRef","setisRunning","isRunningRef","runSimulation","nextGrid","conway","e","interval","target","toString","replace","isNaN","undefined","ReactDOM","render","StrictMode","getElementById","orientation","navigator","userAgent","indexOf"],"mappings":"wPAAaA,G,MACJ,CACLC,IAAK,GACLC,OAAQ,GACRC,WAAW,EACXC,QAAS,CACPC,gBAAiB,EACjBC,mBAAoB,KAPbN,EAUJ,CACLO,KAAM,GACNC,WAAY,UACZC,UAAW,UACXC,OAAQ,qBAdCV,EAgBD,CACRW,MAAO,GACPC,gBACE,6XACFC,cAAe,UACfC,aAAc,UACdC,cAAe,UACfC,kBAAmB,UACnBC,kBAAmB,WCxBVC,EAAqB,SAACjB,EAAakB,GAAd,OAChCC,MAAMC,KAAKD,MAAMnB,IAAMqB,KAAI,kBAAMF,MAAMC,KAAKD,MAAMD,IAAMI,KAAK,OAWlDC,EAAoB,SAACC,GAAD,MAAsB,CACrDA,EAAKC,OACLD,EAAK,GAAGC,SAGGC,EAAiB,kBAC5BC,OAAOC,YACPC,SAASC,gBAAgBC,aACzBF,SAASG,KAAKD,aAEHE,EAAkB,kBAC7BN,OAAOO,aACPL,SAASC,gBAAgBK,cACzBN,SAASG,KAAKG,cAsBHC,EAAqB,WAChC,IAAIC,EAA0B,IAArBV,OAAOO,YAChBL,SAASC,gBAAgBQ,MAAMC,YAAY,OAA3C,UAAsDF,EAAtD,QAGWG,EAAa,kBAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAoB,EAAK,GAE7DC,EAAqB,iBC1BnBC,EAzBS,WAAO,IAAD,EACUC,mBAASpB,GADnB,mBACrBqB,EADqB,KACRC,EADQ,OAEYF,mBAASb,GAFrB,mBAErBgB,EAFqB,KAEPC,EAFO,KAsB5B,OAlBAC,qBAAU,WACR,IAAIC,EAEEC,EAAiB,WACrBC,aAAaF,GACbA,EAAYG,YAAW,WACrBP,EAAetB,KACfwB,EAAgBjB,OACf,MAKL,OAFAN,OAAO6B,iBAAiB,SAAUH,GAE3B,WACL1B,OAAO8B,oBAAoB,SAAUJ,MAEtC,IAEI,CAAEN,cAAaE,iBCrBhBS,EAAa3D,EA0FN4D,EAhFqB,SAAC,GAM9B,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,KACAC,EACI,EADJA,QACI,EACoClB,oBAAS,GAD7C,mBACGmB,EADH,KACiBC,EADjB,KAEEnB,EAAgBF,IAAhBE,YACN,OACE,yBAAKoB,UAAU,mBACVF,GAAgBlB,EAAc,MAC/B,wBAAIoB,UAAU,aAAd,yBAEF,uBAAGA,UAAU,YAAYT,EAAS/C,iBAClC,yBAAKwD,UAAU,gBACb,0BAAMA,UAAU,MAAMC,QAASP,GAC7B,0BACEvB,MAAO,CACL+B,WAAaT,EAETF,EAAS7C,aADT6C,EAAS9C,gBAIbgD,EAAqB,OAAT,SAGlB,0BAAMO,UAAU,OACd,0BACEC,QAASN,EACTxB,MAAO,CACL+B,WAAYX,EAAS5C,gBAHzB,UASF,0BAAMqD,UAAU,MAAMC,QAAS,kBAAMF,GAAiBD,KACpD,0BACE3B,MAAO,CACL+B,WAAaJ,EAETP,EAAS1C,kBADT0C,EAAS3C,oBAIbkD,EAA4B,OAAb,aAGpBA,GACC,yBAAKE,UAAU,0BACb,yBAAKA,UAAU,eACb,mDACA,0BAAMA,UAAU,OACd,2BACEG,KAAK,OACLhC,MAAO,CAAEiC,MAAO,IAChBC,MAAOT,EACPU,SAAUT,MAIhB,yBAAKG,UAAU,eACb,0BAAMA,UAAU,OACd,0BACEC,QAASN,EACTxB,MAAO,CACL+B,WAAYX,EAAS5C,gBAHzB,eCzER4D,EAAU3E,EA+CH4E,EAtCe,SAAC,GAKxB,IAJLC,EAII,EAJJA,aACApD,EAGI,EAHJA,KACAqD,EAEI,EAFJA,cACAC,EACI,EADJA,gBAEA,OACE,0BAAMX,UAAU,iBAAiBY,IAAKH,KACjCC,EAAc5E,QACf,yBACEkE,UAAU,OACV7B,MAAO,CACL0C,oBAAoB,UAAD,OAAYH,EAAc5E,OAA1B,aAAqCyE,EAAMpE,KAA3C,SAGpBkB,EAAKH,KAAI,SAACrB,EAAKiF,GAAN,OACRjF,EAAIqB,KAAI,SAACH,EAAKgE,GAAN,OACN,yBACEf,UAAU,YACVgB,IAAG,UAAKF,GAAL,OAASC,GACZd,QAAS,kBAAMU,EAAgBG,EAAGC,IAClC5C,MAAO,CACLiC,MAAM,GAAD,OAAKG,EAAMpE,KAAX,MACL8E,OAAO,GAAD,OAAKV,EAAMpE,KAAX,MACN+E,gBAAiB7D,EAAKyD,GAAGC,GACrBR,EAAMnE,WACNmE,EAAMlE,UACVC,OAAQiE,EAAMjE,mBC3BnB6E,EAAe,SAAC9D,EAAkByD,EAAWC,GACxD,IAAMK,EAAgBC,EAAyBhE,EAAMyD,EAAGC,GACxD,OAAIK,EAAgB,GAAKA,EAAgB,EAAU,EAC3B,IAAf/D,EAAKyD,GAAGC,IAA8B,IAAlBK,EAA4B,EAC7C/D,EAAKyD,GAAGC,IAGTM,EAA2B,SACtChE,EACAyD,EACAC,GAEA,IAUIK,EAAgB,EAXjB,EAYgBhE,EAAkBC,GAZlC,mBAYIxB,EAZJ,KAYSkB,EAZT,KAoBH,MAnBqB,CACnB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,GAAI,GACL,EAAE,EAAG,IAIMuE,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACzBC,EAAQX,EAAIS,EACZG,EAAQX,EAAIS,EACdC,GAAS,GAAKA,EAAQ5F,GAAO6F,GAAS,GAAKA,EAAQ3E,IACrDqE,GAAiB/D,EAAKoE,GAAOC,OAG1BN,G,OClCIO,EAAoB,SAC/BC,GAMI,IAAD,EAC+BjD,mBAAoB,CAAE9C,IAAK,EAAGC,OAAQ,IADrE,mBACI+F,EADJ,KACeC,EADf,OAEqBnD,oBAAqB,kBAAM7B,EAAmB,EAAG,MAFtE,mBAEIO,EAFJ,KAEU0E,EAFV,KAGGnD,EAAgBF,IAAhBE,YAyBN,OAvBAI,qBAAU,WAcR,GAAI4C,GAAaA,EAAUI,QAAS,CAAC,IAAD,EACIJ,EAAUI,QAC1CC,EAfuB,SAAChB,EAAgBb,GAAmB,IAAD,EAM5DxE,EAHAI,QAAWC,EAHiD,EAGjDA,gBAAiBC,EAHgC,EAGhCA,mBAErBC,EACPP,EADOO,KAEX,MAAO,CACLN,IAAKyC,KAAKC,MAAM0C,EAAS9E,GAAQF,EACjCH,OAAQwC,KAAKC,MAAM6B,EAAQjE,GAAQD,GAMpBgG,CAFiB,EAC1BlE,aAD0B,EACZJ,aAEhBuE,ELpC2B,SAAC,GAEtC,IAF2D,IAAnBtG,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OACvCsG,EAAUtF,EAAmBjB,EAAKC,GAC/BgF,EAAI,EAAGA,EAAIjF,EAAKiF,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIjF,EAAQiF,IAC1BqB,EAAQtB,GAAGC,GAAK1C,IAGpB,OAAO+D,EK6BWC,CAAwBJ,GACtCF,EAAQI,GACRL,GAAa,SAACD,GAAD,sBAAqBA,EAArB,GAAmCI,SAEjD,CAACL,EAAWhD,IAER,CAACvB,EAAM0E,EAASF,EAAWC,ICnCtBvF,EACVX,EADUW,MA0EC+F,EAvEH,WACV,IAAM7B,EAAe8B,iBAAoB,MADzB,EAEmBZ,EAAkBlB,GAFrC,mBAETpD,EAFS,KAEH0E,EAFG,KAEMF,EAFN,OAGQlD,mBAASpC,GAHjB,mBAGTqD,EAHS,KAGHC,EAHG,KAIV2C,EAAUD,iBAAO3C,GAJP,EAKkBjB,oBAAS,GAL3B,mBAKTc,EALS,KAKEgD,EALF,KAMVC,EAAeH,iBAAO9C,GAC5BiD,EAAaV,QAAUvC,EAEvB,IAcMkD,EAAgB,SAAhBA,IACCD,EAAaV,UAClBD,GAAQ,SAAC1E,GAAD,OFpCU,SAACA,GAGrB,IAH2C,IAAD,EACvBD,EAAkBC,GADK,mBACnCxB,EADmC,KAC9BkB,EAD8B,KAEpC6F,EAAW9F,EAAmBjB,EAAKkB,GAChC+D,EAAI,EAAGA,EAAIjF,EAAKiF,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIhE,EAAKgE,IACvB6B,EAAS9B,GAAGC,GAAKI,EAAa9D,EAAMyD,EAAGC,GAG3C,OAAO6B,EE4BaC,CAAOxF,MACzB+B,WAAWuD,EAAeH,EAAQR,WA0BpC,OAJAhD,qBAAU,WACRwD,EAAQR,QAAUpC,IACjB,CAACA,IAGF,yBAAKI,UAAU,kBACb,kBAAC,EAAD,CACEP,UAAWA,EACXC,iBA3B0B,WAC9B+C,GAAchD,GACTA,IACHiD,EAAaV,SAAU,EACvBW,MAwBEhD,WApBoB,WACxB8C,GAAa,GACbV,EAAQjF,EAAmB+E,EAAUhG,IAAKgG,EAAU/F,UAmBhD8D,KAAMA,EACNC,QAjBiB,SAACiD,GACtB,IAAMC,GAAYD,EAAEE,OAAO3C,MAAM4C,WAAWC,QAAQzE,EAAY,IAC3D0E,MAAMJ,IAAWlD,EAAQkD,GACb,OAAbA,QAAkCK,IAAbL,GAAwBlD,EAAQ,MAgBvD,kBAAC,EAAD,CACEY,aAAcA,EACdpD,KAAMA,EACNqD,cAAemB,EACflB,gBA5CyB,SAACY,EAAWC,GAAZ,OAZP,SAACD,EAAWC,GAGlC,IAHiD,IACzC3F,EAAgBgG,EAAhBhG,IAAKC,EAAW+F,EAAX/F,OACPsG,EAAUtF,EAAmBjB,EAAKC,GAC/BgF,EAAI,EAAGA,EAAIjF,EAAKiF,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIjF,EAAQiF,IACFqB,EAAQtB,GAAGC,GAA/BD,IAAMS,GAAKR,IAAMS,EAAmBnE,EAAKyD,GAAGC,GAAK,EAAI,EACpC1D,EAAKyD,GAAGC,GAGjCgB,EAAQK,GAG+CzB,CAAgBY,EAAGC,QC5B9E6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7F,SAAS8F,eAAe,SPkCM,qBAAvBhG,OAAOiG,cAC+B,IAA7CC,UAAUC,UAAUC,QAAQ,cO/B5B3F,IACAT,OAAO6B,iBAAiB,UAAU,WAChCpB,U","file":"static/js/main.d8144a54.chunk.js","sourcesContent":["export const config = {\n  board: {\n    row: 50,\n    column: 50,\n    randomize: true,\n    padding: {\n      verticalPadding: 3,\n      hoirizontalPadding: 0,\n    },\n  },\n  cells: {\n    size: 20,\n    aliveColor: \"#dc7373\",\n    deadColor: \"#212121\",\n    border: \"solid 1px #0f0f0f\",\n  },\n  controls: {\n    speed: 25,\n    gameDescription:\n      \"The game is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves. It is Turing complete and can simulate a universal constructor or any other Turing machine. Simply click on the grid to set intial state and click play!\",\n    startBtnColor: \"#a3dc63\",\n    stopBtnColor: \"#ff4343\",\n    resetBtnColor: \"#f17bcd\",\n    showSettingsColor: \"#63bbde\",\n    hideSettingsColor: \"#ebd74b\",\n  },\n}\n","export const emptyGridGenerator = (row: number, col: number): number[][] =>\n  Array.from(Array(row)).map(() => Array.from(Array(col)).fill(0))\n\nexport const randomizedGridGenerator = ({ row, column }) => {\n  const newGrid = emptyGridGenerator(row, column)\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < column; j++) {\n      newGrid[i][j] = randomizer()\n    }\n  }\n  return newGrid\n}\nexport const getCurrentGridDim = (grid: number[][]) => [\n  grid.length,\n  grid[0].length,\n]\n\nexport const getWindowWidth = () =>\n  window.innerWidth ||\n  document.documentElement.clientWidth ||\n  document.body.clientWidth\n\nexport const getWindowHeight = () =>\n  window.innerHeight ||\n  document.documentElement.clientHeight ||\n  document.body.clientHeight\n\n// export const getPadding = (\n//   {\n//     verticalPadding,\n//     hoirizontalPadding,\n//     smScreenVerticalPadding,\n//     smScreenhoirizontalPadding,\n//   },\n//   windowWidth: number\n// ): { vPadding: number; hPadding: number } =>\n//   windowWidth > 576\n//     ? { vPadding: verticalPadding, hPadding: hoirizontalPadding }\n//     : {\n//         vPadding: smScreenVerticalPadding,\n//         hPadding: smScreenhoirizontalPadding,\n//       }\n\nexport const isMobileDevice = () =>\n  typeof window.orientation !== \"undefined\" ||\n  navigator.userAgent.indexOf(\"IEMobile\") !== -1\n\nexport const setContainerHeight = () => {\n  let vh = window.innerHeight * 0.01\n  document.documentElement.style.setProperty(\"--vh\", `${vh}px`)\n}\n\nexport const randomizer = () => (Math.floor(Math.random() * 10000) % 5) % 2\n\nexport const digitsOnly: RegExp = /[^1234567890]/g\n","import { useEffect, useState } from \"react\"\nimport { getWindowWidth, getWindowHeight } from \"utils/utils\"\n\nconst useWindowResize = () => {\n  const [windowWidth, setWindowWidth] = useState(getWindowWidth)\n  const [windowHeight, setWindowHeight] = useState(getWindowHeight)\n\n  useEffect(() => {\n    let timeoutId\n\n    const resizeListener = () => {\n      clearTimeout(timeoutId)\n      timeoutId = setTimeout(() => {\n        setWindowWidth(getWindowWidth())\n        setWindowHeight(getWindowHeight())\n      }, 150)\n    }\n\n    window.addEventListener(\"resize\", resizeListener)\n\n    return () => {\n      window.removeEventListener(\"resize\", resizeListener)\n    }\n  }, [])\n\n  return { windowWidth, windowHeight }\n}\n\nexport default useWindowResize\n","import React, { useState, FC } from \"react\"\nimport { config } from \"utils/config\"\nimport useWindowResize from \"hooks/useWindowResize\"\n\nconst { controls } = config\n\ninterface ControlsProps {\n  isRunning: boolean\n  tick: number\n  toggleSimulation: () => void\n  clearBoard: () => void\n  setTick: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst Controls: FC<ControlsProps> = ({\n  isRunning,\n  toggleSimulation,\n  clearBoard,\n  tick,\n  setTick,\n}) => {\n  const [showSettings, setShowSettings] = useState(false)\n  let { windowWidth } = useWindowResize()\n  return (\n    <nav className=\"Nav-container\">\n      {!(showSettings && windowWidth < 582) && (\n        <h2 className=\"Nav-title\">conway's game of life</h2>\n      )}\n      <p className=\"Nav-desc\">{controls.gameDescription}</p>\n      <div className=\"Nav-controls\">\n        <span className=\"btn\" onClick={toggleSimulation}>\n          <span\n            style={{\n              background: !isRunning\n                ? controls.startBtnColor\n                : controls.stopBtnColor,\n            }}\n          >\n            {!isRunning ? \"play\" : \"stop\"}\n          </span>\n        </span>\n        <span className=\"btn\">\n          <span\n            onClick={clearBoard}\n            style={{\n              background: controls.resetBtnColor,\n            }}\n          >\n            reset\n          </span>\n        </span>\n        <span className=\"btn\" onClick={() => setShowSettings(!showSettings)}>\n          <span\n            style={{\n              background: !showSettings\n                ? controls.showSettingsColor\n                : controls.hideSettingsColor,\n            }}\n          >\n            {!showSettings ? \"settings\" : \"done\"}\n          </span>\n        </span>\n        {showSettings && (\n          <div className=\"Nav-settings-container\">\n            <div className=\"Nav-setting\">\n              <label>simulation speed</label>\n              <span className=\"btn\">\n                <input\n                  type=\"text\"\n                  style={{ width: 25 }}\n                  value={tick}\n                  onChange={setTick}\n                />\n              </span>\n            </div>\n            <div className=\"Nav-setting\">\n              <span className=\"btn\">\n                <span\n                  onClick={clearBoard}\n                  style={{\n                    background: controls.resetBtnColor,\n                  }}\n                >\n                  reset\n                </span>\n              </span>\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  )\n}\n\nexport default Controls\n","import React, { FC } from \"react\"\nimport { Dimension } from \"hooks/useBoardGenerator\"\nimport { config } from \"utils/config\"\n\nconst { cells } = config\n\ninterface BoardProps {\n  gameBoardRef: React.RefObject<HTMLElement>\n  grid: number[][]\n  gridDimension: Dimension\n  toggleCellState: (x: number, y: number) => void\n}\n\nconst Board: FC<BoardProps> = ({\n  gameBoardRef,\n  grid,\n  gridDimension,\n  toggleCellState,\n}) => {\n  return (\n    <main className=\"Grid-container\" ref={gameBoardRef}>\n      {!!gridDimension.column && (\n        <div\n          className=\"Grid\"\n          style={{\n            gridTemplateColumns: `repeat(${gridDimension.column}, ${cells.size}px)`,\n          }}\n        >\n          {grid.map((row, i) =>\n            row.map((col, j) => (\n              <div\n                className=\"Grid-cell\"\n                key={`${i}${j}`}\n                onClick={() => toggleCellState(i, j)}\n                style={{\n                  width: `${cells.size}px`,\n                  height: `${cells.size}px`,\n                  backgroundColor: grid[i][j]\n                    ? cells.aliveColor\n                    : cells.deadColor,\n                  border: cells.border,\n                }}\n              ></div>\n            ))\n          )}\n        </div>\n      )}\n    </main>\n  )\n}\n\nexport default Board\n","import { emptyGridGenerator, getCurrentGridDim } from \"utils/utils\"\n\nexport const conway = (grid: number[][]) => {\n  const [row, col] = getCurrentGridDim(grid)\n  const nextGrid = emptyGridGenerator(row, col)\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      nextGrid[i][j] = getCellState(grid, i, j)\n    }\n  }\n  return nextGrid\n}\n\nexport const getCellState = (grid: number[][], i: number, j: number) => {\n  const neighborCount = getNeighboringCellsCount(grid, i, j)\n  if (neighborCount < 2 || neighborCount > 3) return 0\n  else if (grid[i][j] === 0 && neighborCount === 3) return 1\n  else return grid[i][j]\n}\n\nexport const getNeighboringCellsCount = (\n  grid: number[][],\n  i: number,\n  j: number\n) => {\n  const neighborhood = [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0],\n    [1, 1],\n    [-1, -1],\n    [1, -1],\n    [-1, 1],\n  ]\n  let neighborCount = 0\n  const [row, col] = getCurrentGridDim(grid)\n  neighborhood.forEach(([x, y]) => {\n    const currI = i + x\n    const currJ = j + y\n    if (currI >= 0 && currI < row && currJ >= 0 && currJ < col) {\n      neighborCount += grid[currI][currJ]\n    }\n  })\n  return neighborCount\n}\n","import { useEffect, useState, Dispatch, SetStateAction } from \"react\"\nimport { config } from \"../utils/config\"\nimport { emptyGridGenerator, randomizedGridGenerator } from \"utils/utils\"\nimport useWindowResize from \"./useWindowResize\"\n\nexport interface Dimension {\n  row: number\n  column: number\n}\n\nexport const useBoardGenerator = (\n  gameBoard: React.RefObject<HTMLElement> | null\n): [\n  number[][],\n  Dispatch<SetStateAction<any[][]>>,\n  Dimension,\n  Dispatch<SetStateAction<Dimension>>\n] => {\n  const [dimension, setDimension] = useState<Dimension>({ row: 0, column: 0 })\n  const [grid, setGrid] = useState<number[][]>(() => emptyGridGenerator(0, 0))\n  let { windowWidth } = useWindowResize()\n\n  useEffect(() => {\n    const calculateGridDimension = (height: number, width: number) => {\n      const {\n        board: {\n          padding: { verticalPadding, hoirizontalPadding },\n        },\n        cells: { size },\n      } = config\n      return {\n        row: Math.floor(height / size) - verticalPadding,\n        column: Math.floor(width / size) - hoirizontalPadding,\n      }\n    }\n\n    if (gameBoard && gameBoard.current) {\n      const { clientHeight, clientWidth } = gameBoard.current\n      const boardDim = calculateGridDimension(clientHeight, clientWidth)\n      const board = randomizedGridGenerator(boardDim)\n      setGrid(board)\n      setDimension((dimension) => ({ ...dimension, ...boardDim }))\n    }\n  }, [gameBoard, windowWidth])\n\n  return [grid, setGrid, dimension, setDimension]\n}\n","import React, { useState, useRef, useEffect } from \"react\"\nimport \"./App.scss\"\nimport Controls from \"components/Controls\"\nimport Board from \"components/Board\"\nimport { emptyGridGenerator, digitsOnly } from \"utils/utils\"\nimport { conway } from \"conway\"\nimport { useBoardGenerator } from \"hooks/useBoardGenerator\"\nimport { config } from \"utils/config\"\n\nconst {\n  controls: { speed },\n} = config\n\nconst App = () => {\n  const gameBoardRef = useRef<HTMLElement>(null)\n  const [grid, setGrid, dimension] = useBoardGenerator(gameBoardRef)\n  const [tick, setTick] = useState(speed)\n  const tickRef = useRef(tick)\n  const [isRunning, setisRunning] = useState(false)\n  const isRunningRef = useRef(isRunning)\n  isRunningRef.current = isRunning\n\n  const toggleCellState = (x: number, y: number) => {\n    const { row, column } = dimension\n    const newGrid = emptyGridGenerator(row, column)\n    for (let i = 0; i < row; i++) {\n      for (let j = 0; j < column; j++) {\n        if (i === x && j === y) newGrid[i][j] = grid[i][j] ? 0 : 1\n        else newGrid[i][j] = grid[i][j]\n      }\n    }\n    setGrid(newGrid)\n  }\n\n  const toggleCellStateHandler = (x: number, y: number) => toggleCellState(x, y)\n\n  const runSimulation = () => {\n    if (!isRunningRef.current) return\n    setGrid((grid) => conway(grid))\n    setTimeout(runSimulation, tickRef.current)\n  }\n\n  const toggleSimulationHandler = () => {\n    setisRunning(!isRunning)\n    if (!isRunning) {\n      isRunningRef.current = true\n      runSimulation()\n    }\n  }\n\n  const clearBoardHandler = () => {\n    setisRunning(false)\n    setGrid(emptyGridGenerator(dimension.row, dimension.column))\n  }\n\n  const setTickHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const interval = +e.target.value.toString().replace(digitsOnly, \"\")\n    if (!isNaN(interval)) setTick(interval)\n    if (interval === null || interval === undefined) setTick(0)\n  }\n\n  useEffect(() => {\n    tickRef.current = tick\n  }, [tick])\n\n  return (\n    <div className=\"Main-container\">\n      <Controls\n        isRunning={isRunning}\n        toggleSimulation={toggleSimulationHandler}\n        clearBoard={clearBoardHandler}\n        tick={tick}\n        setTick={setTickHandler}\n      />\n      <Board\n        gameBoardRef={gameBoardRef}\n        grid={grid}\n        gridDimension={dimension}\n        toggleCellState={toggleCellStateHandler}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport { isMobileDevice, setContainerHeight } from \"utils/utils\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\nif (isMobileDevice()) {\n  setContainerHeight()\n  window.addEventListener(\"resize\", () => {\n    setContainerHeight()\n  })\n}\n"],"sourceRoot":""}